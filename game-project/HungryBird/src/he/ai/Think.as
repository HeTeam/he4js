package he.ai
{
	/**
	 * Think 思维控制器 。
	 * 1、信号输入，将信号抽象转换成节点，多个节点进一步抽象成更少的节点直到抽象成一个节点，在界面（UI）中展示抽象出的节点树。
	 * 2、抽象过程中不断从记忆（Net）中提取相似的节点进行对比。
	 * 3、控制器查看抽象出的节点树，在树中查找需求。
	 * 4、根据需求进行联想，并从 Net 中提取。
	 * 5、将联想到的节点构建成一颗行为树，并在 UI 中呈现。
	 * 6、搜索行为树，找到可以输出的多个节点。（比如，距离，缩短距离，金钱，提款或工作）
	 * 7、评估多个分支的收益，从收益效率最高的节点开始尝试。（不一定是从收益最高的节点开始，有些事情不重要但很紧急，比如学习收益最高，但灭火更紧急）
	 * 8、根据外部世界的变化，重新运算当前树或分支节点的收益。
	 * 9、继续运转行为树（或多个层次的行为树），定时回到第 8 项。
	 * 10、直到达成，或因中途收益变化等原因，临时暂停或终止。
	 * 11、在没有强烈的外部刺激的情况下，根据需求，建立一颗宏观树，对外部世界进行互动和尝试，学习更多知识，以便于将来更高效的与世界互动。
	 */
	public class Think
	{
		public function Think()
		{
			// todo
		}
		public function dataIn():void
		{
			// todo
		}
	}
}